{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#godot-luaapi-v20-alpha","title":"Godot LuaAPI V2.0-alpha","text":"<p>Warning</p> <p>This is an alpha version of the module made for Godot v4-beta. Please see the branch v1.1-stable for Godot v3.x.</p> <p> </p> Art created by Alex <p>This is a Godot engine module that adds Lua API support via GDScript. Importantly this is NOT meant to be a replacement for or alternative to GDScript. This module provides no functionality to program your game out of the box. This module allows you to create custom Modding API's in a sandboxed environment. You have control of what people can and can not do within that sandbox.</p> <p>To use you can either Compile from source or you can download one of the nightly builds.</p> <p>By default the Lua print function is set to print to the GDEditor console. This can be changed by exposing your own print function as it will overwrite the existing one.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Run Lua directly from a string or a text file.</li> <li>Push any Variant as a global.</li> <li>Call Lua functions from GDScript.</li> <li>Choose which libraries you want Lua to have access to.</li> <li>Custom LuaCallable type which allows you to get a Lua function as a Callable.</li> <li>LuaError type which is used to report any errors this module or Lua run into.</li> <li>LuaThread type which creates a Lua thread. This is not a OS thread but a coroutine.</li> <li>Object passed as userdata.</li> <li>Objects can override most of the Lua metamethods. I.E. __index by defining a function with the same name.</li> <li>Callables passed as userdata, which allows you to push a Callable as a Lua function.</li> <li>Basic types are passed as userdata (currently: Vector2, Vector3, Color, Rect2, Plane) with a useful metatable.</li> </ul> <p>If a feature is missing that you would like to see feel free to create a Feature Request or submit a PR.</p>"},{"location":"classes/lua_api/","title":"LuaAPI","text":""},{"location":"classes/lua_api/#description","title":"Description","text":"<p>The LuaAPI class is used to interact with Lua from GDScript.  </p> <p>This class provides the methods to execute Lua code; to call Lua functions from GDScript; to read and write the value of global Lua variables; to create a Lua constructor for a GDScript class and more.</p>"},{"location":"classes/lua_api/#methods","title":"Methods","text":""},{"location":"classes/lua_api/#bind_libraries","title":"bind_libraries void","text":"<p>Takes an array of strings and binds the Lua state to each library. It is case insensitive.  </p> <p>Danger</p> <p>The IO and OS libraries have some dangerous methods such as <code>os.execute</code> or <code>io.write</code>. Make these libraries available to the end user at your own risk.</p> <p>Info</p> <p>You can learn more about the available libraries and their methods in the official Lua manual.</p>"},{"location":"classes/lua_api/#parameters","title":"Parameters","text":"Parameters Description libraries: <code>Array</code> Array of all Lua libraries you would like to make available. The libraries are \"base\", \"coroutine\", \"debug\", \"table\", \"string\", \"math\", \"io\", \"os\", \"utf8\" and \"package\"."},{"location":"classes/lua_api/#returns","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_api/#example","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\n# All libraries are available.\n# Use the OS and IO libraries at your own risk.\nlua.bind_libraries([\"base\", \"table\", \"string\"])\n</code></pre>"},{"location":"classes/lua_api/#call_function","title":"call_function Variant","text":"<p>Calls a global Lua function from GDscript.  </p> <p>You can pass any number of arguments to the Lua function by adding them to the array parameter.</p>"},{"location":"classes/lua_api/#parameters_1","title":"Parameters","text":"Parameters Description luaFunctionName: <code>String</code> Name of the Lua function to be invoked. args: <code>Array</code> Array of arguments to be passed to the Lua function."},{"location":"classes/lua_api/#returns_1","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_api/#example_1","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.bind_libraries([\"base\"])\nlua.do_file(\"user://file.lua\")\n# Call the \"test\" Lua function with \"Val1\", 2 and true as arguments.\nlua.call_function(\"test\", [\"Val1\", 2, true])\n</code></pre> Example: user://file.lua <p>user://file.lua<pre><code>function test(myString, myNumber, myBoolean)\nprint(\"I got \"..myString..\", \"..tostring(myNumber)..\", \"..tostring(myBoolean))\nend\n</code></pre> Output<pre><code>I got Val1, 2, true\n</code></pre></p>"},{"location":"classes/lua_api/#do_file","title":"do_file LuaError?","text":"<p>Loads a file by its absolute path into the Lua state.</p> <p>Warning</p> <p>You might experience issues when loading a file in the \"res://\" directory after the game has been exported. In this case, it is recommended to load the file's contents as a string and use the do_string method instead.</p>"},{"location":"classes/lua_api/#parameters_2","title":"Parameters","text":"Parameters Description filePath: <code>String</code> Absolute path to the file."},{"location":"classes/lua_api/#returns_2","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_api/#example_2","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.do_file(\"user://luaFile.lua\")\n</code></pre>"},{"location":"classes/lua_api/#do_string","title":"do_string LuaError?","text":"<p>Loads the content of a string into the Lua state, executing it.</p>"},{"location":"classes/lua_api/#parameters_3","title":"Parameters","text":"Parameters Description content: <code>String</code> A string containing Lua code to be executed."},{"location":"classes/lua_api/#returns_3","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_api/#examples","title":"Examples","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.do_string(\"for i=1,10,1 do print('Hello lua!') end\")\n</code></pre>"},{"location":"classes/lua_api/#expose_constructor","title":"expose_constructor LuaError?","text":"<p>Exposes the constructor of a class to Lua as a global method.</p>"},{"location":"classes/lua_api/#parameters_4","title":"Parameters","text":"Parameters Description constructorName: <code>String</code> The name of the constructor in Lua. gdscriptClass: <code>Object</code> A GDScript class or any Object that can be created with the <code>.new</code> method."},{"location":"classes/lua_api/#returns_4","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_api/#examples_1","title":"Examples","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nclass Player:\nvar pos = Vector2(0, 0)\n# If lua_funcs is not defined or returns an empty array, all class methods will be available in Lua.\nfunc lua_funcs():\nreturn [\"move_forward\"]\n# lua_fields behaves similarly to lua_funcs but for fields.\nfunc lua_fields():\nreturn [\"pos\"]\nfunc move_forward():\npos.x += 1\nfunc _ready():\nlua = LuaAPI.new()\nlua.expose_constructor(\"Player\", Player)\nlua.do_string(\"player = Player() player.move_forward() print(player.pos.x)\")\nvar player = lua.pull_variant(\"player\")\nprint(player.pos)\n</code></pre> <p>The string passed to <code>lua.do_string</code> is the following Lua code:</p> <pre><code>player = Player()\nplayer.move_forward()\nprint(player.pos.x)\n</code></pre>"},{"location":"classes/lua_api/#function_exists","title":"function_exists bool","text":"<p>Returns <code>true</code> if there is a Lua function with the provided name.</p>"},{"location":"classes/lua_api/#parameters_5","title":"Parameters","text":"Parameters Description functionName: <code>String</code> The name of the Lua function to check."},{"location":"classes/lua_api/#returns_5","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua_api/#example_3","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.do_file(\"user://file.lua\")\n# Check if the \"test\" Lua function is defined.\nif(lua.function_exists(\"test\")):\nprint(\"yes\")\nelse:\nprint(\"no\")\n</code></pre> Example: user://file.lua <p>user://file.lua<pre><code>-- The \"test\" function is defined in Lua.\nfunction test()\n-- Code here...\nend\n</code></pre> Output<pre><code>yes\n</code></pre></p>"},{"location":"classes/lua_api/#pull_variant","title":"pull_variant Variant","text":"<p>Reads the value of a variable by its name from the Lua state.</p>"},{"location":"classes/lua_api/#parameters_6","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to read."},{"location":"classes/lua_api/#returns_6","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_api/#example_4","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.do_string(\"myNumber = 10\")\n# Read the value of myNumber.\nvar my_number = lua.pull_variant(\"myNumber\")\nprint(my_number)\n</code></pre> Output<pre><code>10\n</code></pre></p>"},{"location":"classes/lua_api/#push_variant","title":"push_variant LuaError?","text":"<p>Pushes a copy of a variant (<code>value</code>) to the Lua stack as the global variable <code>variableName</code>.</p>"},{"location":"classes/lua_api/#parameters_7","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to write to. value: <code>Variant</code> The value to be written."},{"location":"classes/lua_api/#returns_7","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_api/#example_5","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nvar test = \"Hello Lua!\"\nfunc _ready():\nlua = LuaAPI.new()\nlua.push_variant(\"str\", test)\nlua.do_string(\"print(str)\")\n</code></pre> Output<pre><code>Hello Lua!\n</code></pre></p>"},{"location":"classes/lua_error/","title":"LuaError","text":""},{"location":"classes/lua_error/#description","title":"Description","text":"<p>A LuaError represents an error that happened in Lua.  </p> <p>Info</p> <p>Most functions in this module return either a LuaError or null. </p> <p>Tip</p> <p>You may return a LuaError object from a GDScript function, called from Lua, in order to cause an error in Lua.</p>"},{"location":"classes/lua_error/#enumerations","title":"Enumerations","text":""},{"location":"classes/lua_error/#errortype","title":"ErrorType","text":"Name Value Description ERR_TYPE 1 Invalid type error. For example, passing a string when an int was expected. ERR_RUNTIME 2 Lua runtime error. ERR_SYNTAX 3 Lua syntax error. ERR_MEMORY 4 Lua ran out of memory. ERR_ERR 5 Error while handling another error. ERR_FILE 6 Error while opening or reading a file."},{"location":"classes/lua_error/#properties","title":"Properties","text":""},{"location":"classes/lua_error/#message-string","title":"message String","text":"<p>A string containing the error message.</p>"},{"location":"classes/lua_error/#type-errortype","title":"type ErrorType","text":"<p>An enum representing the type of the error.</p>"},{"location":"classes/lua_error/#methods","title":"Methods","text":""},{"location":"classes/lua_error/#new_err","title":"new_error LuaError","text":"<p>Static function that acts as a constructor for new instances of the LuaError class.</p>"},{"location":"classes/lua_error/#parameters","title":"Parameters","text":"Parameters Description message: <code>String</code> The error message. type: <code>ErrorType</code> An enum representing the type of this error."},{"location":"classes/lua_error/#returns","title":"Returns","text":"<p>LuaError</p>"},{"location":"classes/lua_error/#example","title":"Example","text":"<p><pre><code>func test(n: int):\nif n != 5:\n## This will raise an error in the Lua state.\nreturn LuaError.new_error(\"N is not 5 but is %s\" % n, LuaError.ERR_RUNTIME)\nreturn n+5\nfunc _ready():\nlua = LuaAPI.new()\nlua.push_variant(\"test\", test)\n## Most methods return a LuaError.\n## Calling \"test\" with a type that is not a int would also raise a error.\nvar err = lua.do_string(\"test(6)\")\n## If an error does not occur, err will be null.\nif err is LuaError:\nprint(\"ERROR %d: \" % err.type + err.message)\n</code></pre> Output<pre><code>ERROR 2: [LUA_ERRRUN - runtime error ]\nN is not 5 but is 6\nstack traceback:\n    [string \"test(6)\"]:1: in main chunk\n</code></pre></p>"},{"location":"classes/lua_thread/","title":"LuaThread","text":""},{"location":"classes/lua_thread/#description","title":"Description","text":"<p>The confusingly named LuaThread class is used to create and manage Lua coroutines, not OS threads. Lua coroutines bound to the same Lua object share the same global variables.</p> <p>In contrast to the LuaAPI class, any file or string you load into the state will not be immediately executed. Everytime the resume method is called, the Lua code will execute until its end is reached or until <code>yield</code> is called from Lua.  </p> <p>Lua code running inside a LuaThread has access to the <code>yield</code> function which can accept and return any number of arguments to GDScript through the resume function of the thread. Typically, you will use this function to pause the Lua code for as long as the user specifies in its arguments (see the example below).</p>"},{"location":"classes/lua_thread/#methods","title":"Methods","text":""},{"location":"classes/lua_thread/#new_thread","title":"new_thread LuaThread","text":"<p>Static method that creates and binds a LuaThread object to a LuaAPI object. This method is equivalent to creating a new thread object and then calling its bind method.</p>"},{"location":"classes/lua_thread/#parameters","title":"Parameters","text":"Parameters Description lua: <code>LuaAPI</code> The LuaAPI object to bind to."},{"location":"classes/lua_thread/#returns","title":"Returns","text":"<p>LuaThread</p>"},{"location":"classes/lua_thread/#bind","title":"bind void","text":"<p>Binds the thread to a LuaAPI object. All threads attached to the same object share the same resources.</p>"},{"location":"classes/lua_thread/#parameters_1","title":"Parameters","text":"Parameters Description lua: <code>LuaAPI</code> The LuaAPI object to bind to."},{"location":"classes/lua_thread/#returns_1","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_thread/#load_file","title":"load_file LuaError?","text":"<p>Loads a file by its absolute path into the thread's state.</p> <p>Warning</p> <p>This method simply loads the contents of the file into the Lua state. It does not execute it. You must use the resume method to execute the code that was loaded.</p> <p>Warning</p> <p>You might experience issues when loading a file in the \"res://\" directory after the game has been exported. In this case, it is recommended to load the file's contents as a string and use the load_string method instead.</p>"},{"location":"classes/lua_thread/#parameters_2","title":"Parameters","text":"Parameters Description filePath: <code>String</code> Path to the file."},{"location":"classes/lua_thread/#returns_2","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_thread/#load_string","title":"load_string void","text":"<p>Loads the content of a string into the Lua state.</p> <p>Warning</p> <p>This method simply loads a string of Lua code into the Lua state. It does not execute it. You must use the resume method to execute the code that was loaded.</p>"},{"location":"classes/lua_thread/#parameters_3","title":"Parameters","text":"Parameters Description content: <code>String</code> A string containing Lua code to be loaded."},{"location":"classes/lua_thread/#returns_3","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_thread/#resume","title":"resume Variant","text":"<p>Resumes or starts the thread. Will either return an Array of arguments passed by Lua through the yield() function or a LuaError.</p>"},{"location":"classes/lua_thread/#parameters_4","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_thread/#returns_4","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_thread/#is_done","title":"is_done bool","text":"<p>Returns <code>true</code> if the thread has finished executing.</p>"},{"location":"classes/lua_thread/#parameters_5","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_thread/#returns_5","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua_thread/#call_function","title":"call_function Variant","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Calls a global Lua function from GDscript.  </p> <p>You can pass any number of arguments to the Lua function by adding them to the array parameter.</p>"},{"location":"classes/lua_thread/#parameters_6","title":"Parameters","text":"Parameters Description luaFunctionName: <code>String</code> Name of the Lua function to be invoked. args: <code>Array</code> Array of arguments to be passed to the Lua function."},{"location":"classes/lua_thread/#returns_6","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_thread/#example","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nvar thread: LuaThread\nfunc _ready():\nlua = LuaAPI.new()\nlua.bind_libraries([\"base\"])\nthread = LuaThread.new_thread(lua)\nthread.load_file(\"user://file.lua\")\nthread.resume()\n# Call the \"test\" Lua function with \"Val1\", 2 and true as arguments.\nthread.call_function(\"test\", [\"Val1\", 2, true])\n</code></pre> Example: user://file.lua <p>user://file.lua<pre><code>function test(myString, myNumber, myBoolean)\nprint(\"I got \"..myString..\", \"..tostring(myNumber)..\", \"..tostring(myBoolean))\nend\n</code></pre> Output<pre><code>I got Val1, 2, true\n</code></pre></p>"},{"location":"classes/lua_thread/#expose_constructor","title":"expose_constructor LuaError?","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Exposes the constructor of a class to Lua as a global method.</p>"},{"location":"classes/lua_thread/#parameters_7","title":"Parameters","text":"Parameters Description constructorName: <code>String</code> The name of the constructor in Lua. gdscriptClass: <code>Object</code> A GDScript class or any Object that can be created with the <code>.new</code> method."},{"location":"classes/lua_thread/#returns_7","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_thread/#examples","title":"Examples","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nvar thread: LuaThread\nclass Player:\nvar pos = Vector2(0, 0)\n# If lua_funcs is not defined or returns an empty array, all class methods will be available in Lua.\nfunc lua_funcs():\nreturn [\"move_forward\"]\n# lua_fields behaves similarly to lua_funcs but for fields.\nfunc lua_fields():\nreturn [\"pos\"]\nfunc move_forward():\npos.x += 1\nfunc _ready():\nlua = LuaAPI.new()\nthread = LuaThread.new_thread(lua)\nthread.expose_constructor(\"Player\", Player)\nthread.load_string(\"player = Player() player.move_forward() print(player.pos.x)\")\nthread.resume()\nvar player = lua.pull_variant(\"player\")\nprint(player.pos)\n</code></pre> <p>The string passed to <code>thread.load_string</code> is the following Lua code:</p> <pre><code>player = Player()\nplayer.move_forward()\nprint(player.pos.x)\n</code></pre>"},{"location":"classes/lua_thread/#function_exists","title":"function_exists bool","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Returns <code>true</code> if there is a Lua function with the provided name.</p>"},{"location":"classes/lua_thread/#parameters_8","title":"Parameters","text":"Parameters Description functionName: <code>String</code> The name of the Lua function to check."},{"location":"classes/lua_thread/#returns_8","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua_thread/#example_1","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nvar thread: LuaThread\nfunc _ready():\nlua = LuaAPI.new()\nthread = LuaThread.new_thread(lua)\nthread.load_file(\"user://file.lua\")\nthread.resume()\n# Check if the \"test\" Lua function is defined.\nif(thread.function_exists(\"test\")):\nprint(\"yes\")\nelse:\nprint(\"no\")\n</code></pre> Example: user://file.lua <p>user://file.lua<pre><code>-- The \"test\" function is defined in Lua.\nfunction test()\n-- Code here...\nend\n</code></pre> Output<pre><code>yes\n</code></pre></p>"},{"location":"classes/lua_thread/#pull_variant","title":"pull_variant Variant","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Reads the value of a variable by its name from the Lua state.</p>"},{"location":"classes/lua_thread/#parameters_9","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to read."},{"location":"classes/lua_thread/#returns_9","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_thread/#example_2","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nvar thread: LuaThread\nfunc _ready():\nlua = LuaAPI.new()\nthread = LuaThread.new_thread(lua)\nthread.load_string(\"myNumber = 10\")\nthread.resume()\n# Read the value of myNumber.\nvar my_number = thread.pull_variant(\"myNumber\")\nprint(my_number)\n</code></pre> Output<pre><code>10\n</code></pre></p>"},{"location":"classes/lua_thread/#push_variant","title":"push_variant LuaError?","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Pushes a copy of a variant (<code>value</code>) to the Lua stack as the global variable <code>variableName</code>.</p>"},{"location":"classes/lua_thread/#parameters_10","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to write to. value: <code>Variant</code> The value to be written."},{"location":"classes/lua_thread/#returns_10","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_thread/#example_3","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nvar thread: LuaThread\nvar test = \"Hello Lua!\"\nfunc _ready():\nlua = LuaAPI.new()\nthread = LuaThread.new_thread(lua)\nthread.push_variant(\"str\", test)\nthread.load_string(\"print(str)\")\nthread.resume()\n</code></pre> Output<pre><code>Hello Lua!\n</code></pre></p>"},{"location":"classes/lua_thread/#example_4","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nvar thread: LuaThread\nfunc _ready():\nlua = LuaAPI.new()\n# Despite the name, this is not like a OS thread. It is a coroutine.\nthread = LuaThread.new_thread(lua)\nthread.load_string(\"\nwhile true do\n-- yield is exposed to Lua when the thread is bound.\nyield(1)\nprint('Hello world!')\nend\n\")\nvar yieldTime = 0\nvar timeSince = 0\nfunc _process(delta):\ntimeSince += delta\n# If the thread has finished executing or if not enough time has passed, do not resume the thread.\nif thread.is_done() || timeSince &lt;= yieldTime:\nreturn\n# thread.resume will either return a LuaError or an Array.\nvar ret = thread.resume()\nif ret is LuaError:\nprint(\"ERROR %d: \" % ret.type + ret.msg)\nreturn\n# Assumes the user will always pass the number of seconds to pause the thread for.\nyieldTime = ret[0]\ntimeSince = 0\n</code></pre>"},{"location":"examples/objects/","title":"Working with Objects in Lua","text":"<p>Normally when using <code>push_variant()</code> or the return value of a GDScript function that Lua calls. The value is copied to Lua. However types that inherit from Objects work a bit differently. Objects will be pushed to Lua as UserData. This means they are passed by reference to or from Lua. </p> <p>In order to call functions and get values from the object we assign the mt_Object metatable to it. This is a custom meta table we defined for Objects. This allows for methods to be called on the object, values to be get/set on the Object and much more.</p> <p>By default every field and method is available to Lua. You can limit what Lua has access to be defining either the <code>lua_fields()</code> method. Which must return an Array of string names for the allowed fields/methods. You can also use the <code>__index()</code> method. Which takes reference to the LuaAPI and a string of the field being requested by Lua. If you would like to allow the field, simply return the value. You may also return a LuaError to raise a error on the Lua state.</p> <p>Below is a example of passing a Object to Lua: <pre><code>extends Node2D\nvar lua: LuaAPI\nclass Player:\nvar pos = Vector2(0, 0)\n# If lua_fields is not defined or returns a empty array, all functions and fields will be aval.\nfunc lua_fields():\nreturn [\"pos\", \"move_forward\"]\nfunc move_forward():\npos.x+=1\nvar player2: Player\nfunc _ready():\nlua = LuaAPI.new()\nplayer2 = Player.new()\nlua.push_variant(\"getPlayer2\", func(): return player2)\nlua.expose_constructor(\"Player\", Player)\nvar err = lua.do_string(\"\"\"\n    player = Player()\n    player.move_forward()\n    print(player.pos.x)\n    player2 = getPlayer2()\n    player2.pos = Vector2(50, 1)\n    print(player2.pos)\n    \"\"\")\nif err is LuaError:\nprint(err.message)\nvar player = lua.pull_variant(\"player\")\nprint(player.pos)\nprint(player2.pos)\n</code></pre></p> <p>For some this is still too limiting though. So we also allow you to override almost any metamethod on the object. Here is a example of that: <pre><code>extends Node2D\nvar lua: LuaAPI\nclass Player:\nvar pos = Vector2(1, 0)\n# Most metamethods can be overriden. The function names are the same as the metamethods.\nfunc __index(ref: LuaAPI, index):\nif index==\"pos\":\nreturn pos\nelse:\nreturn LuaError.new_error(\"Invalid index '%s'\" % index)\nfunc move_forward():\npos.x+=1\nfunc _ready():\nlua = LuaAPI.new()\nlua.expose_constructor(\"Player\", Player)\nvar err = lua.do_string(\"\"\"\n    player = Player()\n    print(player.pos.x)\n    player.move_forward() -- This will cause our custom error\n    \"\"\")\nif err is LuaError:\nprint(err.message)\nvar player = lua.pull_variant(\"player\")\nprint(player.pos)\n</code></pre></p> <p>The first argument passed to the metamethod is always reference to the LuaAPI object. Besides that the arguments will be the same as if you were using it in Lua.</p>"},{"location":"getting_started/before_you_start/","title":"Before you start...","text":"<p>Some things to note, this is not the only way to support Modding in your game. It's also not the only way to support Lua Modding in your game. In fact, using this mod to create your Modding API will likely take a lot more work than using native scripts for Modding. However, the advantage using luaAPI over native scripts is that the Lua code is sandboxed. No one can access parts of the engine that you don't explicitly give access to.</p> <p>If you are looking to make your game using Lua or would like to support Modding without worrying about a sandbox, check out one of these projects:</p> <ul> <li>luascript by perbone</li> <li>godot-lua-pluginscript by gilzoide</li> </ul>"},{"location":"getting_started/installation/","title":"Installation","text":"<p>The first thing you will need to do is obtain a copy of the editor built with this module. You can either compile from source yourself or download one of the nightly builds.</p>"},{"location":"getting_started/installation/#nightly-builds","title":"Nightly Builds","text":"<ul> <li>\ud83d\udc27 Linux Editor</li> <li>\ud83d\udc27 Linux Template</li> <li>\ud83d\udc27 Linux Template Debug</li> <li>\ud83c\udfa8 Windows Editor</li> <li>\ud83c\udfa8 Windows Template</li> <li>\ud83c\udfa8 Windows Template Debug</li> <li>\ud83c\udf4e MacOS Editor</li> <li>\ud83c\udf4e MacOS Template</li> <li>\ud83c\udf4e MacOS Template Debug</li> </ul>"},{"location":"getting_started/installation/#compiling-from-source","title":"Compiling from source","text":""},{"location":"getting_started/installation/#getting-the-sources","title":"Getting the sources","text":"<ul> <li>Start by cloning the main branch of the Godot engine <code>git clone https://github.com/godotengine/godot</code></li> <li>Next cd into godot/modules and clone this repo <code>cd godot/modules</code> <code>git clone --recurse-submodules https://github.com/WeaselGames/godot_luaAPI luaAPI</code></li> </ul>"},{"location":"getting_started/installation/#compiling","title":"Compiling","text":"<p>This module does not requires any extra tooling to compile besides that required by Godot its self. So from this point you can follow the tutorial on the Godot wiki.</p>"}]}