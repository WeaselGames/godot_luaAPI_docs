{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#godot-luaapi-v20-beta","title":"Godot LuaAPI V2.0-beta","text":"<p>Warning</p> <p>this is a beta version of the addon made for Godot v4.0-stable. Which means frequent recompiles may be required and compatibility is not guaranteed between updates.</p> <p> </p> Art created by Alex <p>This is a Godot addon that adds Lua API support via GDScript, C# or GDExtension. Importantly this is NOT meant to be a replacement for or alternative to GDScript. This addon provides no functionality to program your game out of the box. This addon allows you to create custom Modding API's in a sandboxed environment. You have control of what people can and can not do within that sandbox.</p> <p>To use you can either Compile from source or you can download one of the nightly builds.</p> <p>By default the Lua print function is set to print to the GDEditor console. This can be changed by exposing your own print function as it will overwrite the existing one.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Run Lua directly from a string or a text file.</li> <li>Push any Variant as a global.</li> <li>Call Lua functions from GDScript.</li> <li>Choose which libraries you want Lua to have access to.</li> <li>Custom LuaCallable type which allows you to get a Lua function as a Callable.</li> <li>LuaError type which is used to report any errors this addon or Lua run into.</li> <li>LuaThread type which creates a Lua thread. This is not a OS thread but a coroutine.</li> <li>Object passed as userdata.</li> <li>Objects can override most of the Lua metamethods. I.E. __index by defining a function with the same name.</li> <li>Callables passed as userdata, which allows you to push a Callable as a Lua function.</li> <li>Basic types are passed as userdata (currently: Vector2, Vector3, Color, Rect2, Plane) with a useful metatable. If a feature is missing that you would like to see feel free to create a Feature Request or submit a PR.</li> </ul> <p>For discussion related to this project feel free to join the Weasel Games Discord.</p>"},{"location":"classes/lua_api/","title":"LuaAPI","text":""},{"location":"classes/lua_api/#description","title":"Description","text":"<p>The LuaAPI class is used to interact with Lua from GDScript.  </p> <p>This class provides the methods to execute Lua code; to call Lua functions from GDScript; to read and write the value of global Lua variables; to create a Lua constructor for a GDScript class and more.</p>"},{"location":"classes/lua_api/#enumerations","title":"Enumerations","text":""},{"location":"classes/lua_api/#hookmask","title":"HookMask","text":"Name Value Description HOOK_MASK_CALL 1 Bitmask to specifie which events the hook will be called for. HOOK_MASK_RETURN 2 Bitmask to specifie which events the hook will be called for. HOOK_MASK_LINE 4 Bitmask to specifie which events the hook will be called for. HOOK_MASK_COUNT 8 Bitmask to specifie which events the hook will be called for."},{"location":"classes/lua_api/#gcoption","title":"GCOption","text":"Name Value Description GC_STOP 0 Stops the garbage collector. GC_RESTART 1 Restarts the garbage collector. GC_COLLECT 2 Performs a full garbage-collection cycle. GC_COUNT 3 Returns the current amount of memory (in Kbytes) in use by Lua. GC_COUNTB 4 Returns the remainder of dividing the current amount of bytes of memory in use by Lua by 1024. GC_STEP 5 Performs an incremental step of garbage collection. GC_SETPAUSE 6 Sets <code>data</code> as the new value for the pause of the collector. GC_SETSTEPMUL 7 Sets <code>data</code> as the new value for the step multiplier of the collector."},{"location":"classes/lua_api/#properties","title":"Properties","text":""},{"location":"classes/lua_api/#permissive-string","title":"permissive String","text":"<p>Sets weather an Objects lua_field method should be treated as a whitelist or a blacklist. By default its false meaning it acts as a whitelist.</p>"},{"location":"classes/lua_api/#methods","title":"Methods","text":""},{"location":"classes/lua_api/#bind_libraries","title":"bind_libraries void","text":"<p>Takes an array of strings and binds the Lua state to each library. It is case insensitive.  </p> <p>Danger</p> <p>The IO, Package and OS libraries have some dangerous methods such as <code>os.execute</code>, <code>require</code> or <code>io.write</code>. Make these libraries available to the end user at your own risk.</p> <p>Info</p> <p>You can learn more about the available libraries and their methods in the official Lua manual.</p>"},{"location":"classes/lua_api/#parameters","title":"Parameters","text":"Parameters Description libraries: <code>Array</code> Array of all Lua libraries you would like to make available. The libraries are \"base\", \"coroutine\", \"debug\", \"table\", \"string\", \"math\", \"io\", \"os\", \"utf8\" and \"package\"."},{"location":"classes/lua_api/#returns","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_api/#example","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\n# All libraries are available.\n# Use the OS and IO libraries at your own risk.\nlua.bind_libraries([\"base\", \"table\", \"string\"])\n</code></pre>"},{"location":"classes/lua_api/#call_function","title":"call_function Variant","text":"<p>Calls a global Lua function from GDscript.  </p> <p>You can pass any number of arguments to the Lua function by adding them to the array parameter.</p>"},{"location":"classes/lua_api/#parameters_1","title":"Parameters","text":"Parameters Description luaFunctionName: <code>String</code> Name of the Lua function to be invoked. args: <code>Array</code> Array of arguments to be passed to the Lua function."},{"location":"classes/lua_api/#returns_1","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_api/#example_1","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.bind_libraries([\"base\"])\nlua.do_file(\"user://file.lua\")\n# Call the \"test\" Lua function with \"Val1\", 2 and true as arguments.\nlua.call_function(\"test\", [\"Val1\", 2, true])\n</code></pre> Example: user://file.lua <p>user://file.lua<pre><code>function test(myString, myNumber, myBoolean)\nprint(\"I got \"..myString..\", \"..tostring(myNumber)..\", \"..tostring(myBoolean))\nend\n</code></pre> Output<pre><code>I got Val1, 2, true\n</code></pre></p>"},{"location":"classes/lua_api/#do_file","title":"do_file LuaError?","text":"<p>Loads a file by its absolute path into the Lua state.</p> <p>Warning</p> <p>You might experience issues when loading a file in the \"res://\" directory after the game has been exported. In this case, it is recommended to load the file's contents as a string and use the do_string method instead.</p>"},{"location":"classes/lua_api/#parameters_2","title":"Parameters","text":"Parameters Description filePath: <code>String</code> Absolute path to the file."},{"location":"classes/lua_api/#returns_2","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_api/#example_2","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.do_file(\"user://luaFile.lua\")\n</code></pre>"},{"location":"classes/lua_api/#do_string","title":"do_string LuaError?","text":"<p>Loads the content of a string into the Lua state, executing it.</p>"},{"location":"classes/lua_api/#parameters_3","title":"Parameters","text":"Parameters Description content: <code>String</code> A string containing Lua code to be executed."},{"location":"classes/lua_api/#returns_3","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_api/#examples","title":"Examples","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.do_string(\"for i=1,10,1 do print('Hello lua!') end\")\n</code></pre>"},{"location":"classes/lua_api/#expose_constructor","title":"expose_constructor LuaError?","text":"<p>Exposes the constructor of a class to Lua as a global method.</p>"},{"location":"classes/lua_api/#parameters_4","title":"Parameters","text":"Parameters Description constructorName: <code>String</code> The name of the constructor in Lua. gdscriptClass: <code>Object</code> A GDScript class or any Object that can be created with the <code>.new</code> method."},{"location":"classes/lua_api/#returns_4","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_api/#examples_1","title":"Examples","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nclass Player:\nvar pos = Vector2(0, 0)\n# If lua_funcs is not defined or returns an empty array, all class methods will be available in Lua.\nfunc lua_funcs():\nreturn [\"move_forward\"]\n# lua_fields behaves similarly to lua_funcs but for fields.\nfunc lua_fields():\nreturn [\"pos\"]\nfunc move_forward():\npos.x += 1\nfunc _ready():\nlua = LuaAPI.new()\nlua.expose_constructor(\"Player\", Player)\nlua.do_string(\"player = Player() player.move_forward() print(player.pos.x)\")\nvar player = lua.pull_variant(\"player\")\nprint(player.pos)\n</code></pre> <p>The string passed to <code>lua.do_string</code> is the following Lua code:</p> <pre><code>player = Player()\nplayer.move_forward()\nprint(player.pos.x)\n</code></pre>"},{"location":"classes/lua_api/#function_exists","title":"function_exists bool","text":"<p>Returns <code>true</code> if there is a Lua function with the provided name.</p>"},{"location":"classes/lua_api/#parameters_5","title":"Parameters","text":"Parameters Description functionName: <code>String</code> The name of the Lua function to check."},{"location":"classes/lua_api/#returns_5","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua_api/#example_3","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.do_file(\"user://file.lua\")\n# Check if the \"test\" Lua function is defined.\nif(lua.function_exists(\"test\")):\nprint(\"yes\")\nelse:\nprint(\"no\")\n</code></pre> Example: user://file.lua <p>user://file.lua<pre><code>-- The \"test\" function is defined in Lua.\nfunction test()\n-- Code here...\nend\n</code></pre> Output<pre><code>yes\n</code></pre></p>"},{"location":"classes/lua_api/#pull_variant","title":"pull_variant Variant","text":"<p>Reads the value of a variable by its name from the Lua state.</p>"},{"location":"classes/lua_api/#parameters_6","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to read."},{"location":"classes/lua_api/#returns_6","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_api/#example_4","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.do_string(\"myNumber = 10\")\n# Read the value of myNumber.\nvar my_number = lua.pull_variant(\"myNumber\")\nprint(my_number)\n</code></pre> Output<pre><code>10\n</code></pre></p>"},{"location":"classes/lua_api/#push_variant","title":"push_variant LuaError?","text":"<p>Pushes a copy of a variant (<code>value</code>) to the Lua stack as the global variable <code>variableName</code>.</p>"},{"location":"classes/lua_api/#parameters_7","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to write to. value: <code>Variant</code> The value to be written."},{"location":"classes/lua_api/#returns_7","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_api/#example_5","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nvar test = \"Hello Lua!\"\nfunc _ready():\nlua = LuaAPI.new()\nlua.push_variant(\"str\", test)\nlua.do_string(\"print(str)\")\n</code></pre> Output<pre><code>Hello Lua!\n</code></pre></p>"},{"location":"classes/lua_api/#set_hook","title":"set_hook void","text":"<p>Sets the hook for the state. The hook will be called on the events specified by the mask. The count specifies how many instructions should be executed before the hook is called. If count is 0, the hook will be called on every instruction. The hook will be called with the following arguments: <code>hook(parent, event, line)</code>. The parent is the LuaAPI object that owns the current state.</p> <p>This is useful for preventing infinite loops, but it should be kept in mind there will be a large performance tax.</p>"},{"location":"classes/lua_api/#parameters_8","title":"Parameters","text":"Parameters Description hook: <code>Callable</code> The function to be called as a hook. mask: <code>int</code> The hook even mask. count: <code>int</code> Specifies how many instructions should be executed before the hook."},{"location":"classes/lua_api/#returns_8","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_api/#example_6","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nvar coroutine: LuaCoroutine\nfunc _lua_hook(lua: LuaAPI, event: int, line: int):\nvar co: LuaCoroutine = lua.get_running_coroutine()\nco.yield_state([1])\nfunc _ready():\nlua = LuaAPI.new()\n# Despite the name, this is not like a OS coroutine. It is a coroutine.\ncoroutine = lua.new_coroutine()\ncoroutine.set_hook(_lua_hook, lua.HOOK_MASK_COUNT, 8)\ncoroutine.load_string(\"\nfor i=1,2,1 do\nprint('Hello world!')\nend\n\")\nvar yieldTime = 0\nvar timeSince = 0\nvar goodBye = false\nfunc _process(delta):\ntimeSince += delta\n# If the coroutine has finished executing or if not enough time has passed, do not resume the coroutine.\nif coroutine.is_done() || timeSince &lt;= yieldTime:\nif !goodBye:\nlua.do_string(\"\"\"\n            for i = 0,4,1 do \n                print('Good Bye World!')\n            end\n            \"\"\")\ngoodBye=true\nreturn\ngoodBye=false\n# coroutine.resume will either return a LuaError or an Array.\nvar ret = coroutine.resume([])\nif ret is LuaError:\nprint(\"ERROR %d: \" % ret.type + ret.message)\nreturn\nif coroutine.is_done():\nreturn\nyieldTime = ret[0]\ntimeSince = 0\n</code></pre> Output<pre><code>Hello world!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nHello world!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nGood Bye World!\n</code></pre></p>"},{"location":"classes/lua_api/#configure_gc","title":"configure_gc int","text":"<p>Controls the garbage collector. The option can be one of the following: <code>GC_STOP</code>, <code>GC_RESTART</code>, <code>GC_COLLECT</code>, <code>GC_COUNT</code>, <code>GC_STEP</code>, <code>GC_SETPAUSE</code>, <code>GC_SETSTEPMUL</code>. The data is the argument for the option. Returns the result of the option.</p> <p>For more info, see the lua manual https://www.lua.org/manual/5.4/manual.html#lua_gc</p>"},{"location":"classes/lua_api/#parameters_9","title":"Parameters","text":"Parameters Description option: <code>int</code> The GCOption. data: <code>int</code> Argument for the specific option."},{"location":"classes/lua_api/#returns_9","title":"Returns","text":"<p>int</p>"},{"location":"classes/lua_api/#new_coroutine","title":"new_coroutine LuaCoroutine","text":"<p>Creates and binds a LuaCoroutine object to a LuaAPI object. This method is equivalent to creating a new coroutine object and then calling its bind method.</p>"},{"location":"classes/lua_api/#returns_10","title":"Returns","text":"<p>LuaCoroutine</p>"},{"location":"classes/lua_api/#do_file","title":"get_running_coroutine LuaCoroutine","text":"<p>Intended to be called from a lua hook. Returns the current running coroutine.</p>"},{"location":"classes/lua_api/#returns_11","title":"Returns","text":"<p>LuaCoroutine</p>"},{"location":"classes/lua_callable_extra/","title":"LuaCallableExtra","text":""},{"location":"classes/lua_callable_extra/#description","title":"Description","text":"<p>A wrapper for Callables used to create functions that accept either any amount of arguments from Lua as a single LuaTuple parameter or that accept a reference to the LuaAPI object from which the method was invoked, or both.</p>"},{"location":"classes/lua_callable_extra/#properties","title":"Properties","text":""},{"location":"classes/lua_callable_extra/#argc-number","title":"argc number","text":"<p>An integer representing the number of expected arguments.</p>"},{"location":"classes/lua_callable_extra/#tuple-bool","title":"tuple bool","text":"<p>Wether or not the last parameter should be of the type LuaTuple.</p>"},{"location":"classes/lua_callable_extra/#wants_ref-bool","title":"wants_ref bool","text":"<p>Wether or not the method expects a reference to the LuaAPI object that invoked it.</p>"},{"location":"classes/lua_callable_extra/#methods","title":"Methods","text":""},{"location":"classes/lua_callable_extra/#with_ref","title":"with_ref LuaCallableExtra","text":"<p>Static method that creates a LuaCallableExtra. A reference to the LuaAPI object that invoked the method will be passed as an argument to the callable.</p>"},{"location":"classes/lua_callable_extra/#parameters","title":"Parameters","text":"Parameters Description callable: <code>Callable</code> The associated callable."},{"location":"classes/lua_callable_extra/#returns","title":"Returns","text":"<p>LuaCallableExtra</p>"},{"location":"classes/lua_callable_extra/#example","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.push_variant(\"myFunction\", LuaCallableExtra.with_ref(my_function))\nlua.do_string(\"myFunction()\")\nfunc my_function(lua_object: LuaAPI):\nprint(\"I was invoked by \", lua_object)\n</code></pre> Example Output<pre><code>I was invoked by &lt;LuaAPI#-9223372010447437397&gt;\n</code></pre></p>"},{"location":"classes/lua_callable_extra/#with_tuple","title":"with_tuple LuaCallableExtra","text":"<p>Static method that creates a LuaCallableExtra. A reference to the LuaAPI object that invoked the method will be passed as an argument to the callable. By specifying the number of expected arguments in this function, the module will be able to add all, if any, extra arguments to a LuaTuple, which will always be the last parameter.</p>"},{"location":"classes/lua_callable_extra/#parameters_1","title":"Parameters","text":"Parameters Description callable: <code>Callable</code> The associated callable. arg count: <code>number</code> The number of expected arguments excluding the tuple one."},{"location":"classes/lua_callable_extra/#returns_1","title":"Returns","text":"<p>LuaCallableExtra</p>"},{"location":"classes/lua_callable_extra/#example_1","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.push_variant(\n\"somator\",\nLuaCallableExtra.with_tuple(my_somator_function, 1)\n)\nlua.do_string(\"somator(1, 2, 3, 4)\")\nfunc my_somator_function(args: LuaTuple):\nvar sum := 0\nfor index in range(0, args.size()):\nsum += args.get_value(index)\nprint(sum)\nreturn sum\n</code></pre> Output<pre><code>10\n</code></pre></p>"},{"location":"classes/lua_callable_extra/#with_ref_and_tuple","title":"with_ref_and_tuple LuaCallableExtra","text":"<p>Static method that creates a LuaCallableExtra. By specifying the number of expected arguments in this function, the module will be able to add all, if any, extra arguments to a LuaTuple, which will always be the last parameter.</p> <p>Note</p> <p>This method is similar to with_ref and with_tuple combined.</p>"},{"location":"classes/lua_callable_extra/#parameters_2","title":"Parameters","text":"Parameters Description callable: <code>Callable</code> The associated callable. arg count: <code>number</code> The number of expected arguments excluding the tuple one."},{"location":"classes/lua_callable_extra/#returns_2","title":"Returns","text":"<p>LuaCallableExtra</p>"},{"location":"classes/lua_callable_extra/#example_2","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\n# This will replace the built-in print function with ours.\nlua.push_variant(\"print\", LuaCallableExtra.with_ref_and_tuple(custom_print_function, 0))\nlua.do_string(\"\"\"\n        print('Hello!', ' How are you?', ' I havent seen you in ', 10, ' days.')\n    \"\"\")\nfunc custom_print_function(lua_object: LuaAPI, args: LuaTuple):\nprint(args.to_array(), \" -- \", lua_object)\n</code></pre>"},{"location":"classes/lua_callable_extra/#bind","title":"set_info void","text":"<p>Alternative way to configure a LuaCallableExtra. This method is particularly useful for methods that expect both a LuaTuple and a reference to the LuaAPI object.</p>"},{"location":"classes/lua_callable_extra/#parameters_3","title":"Parameters","text":"Parameters Description callable: <code>Callable</code> The associated callable. arg count: <code>number</code> The number of expected arguments excluding the tuple one. isTuple: <code>bool</code> Wether or not the last parameter should be of the type LuaTuple. wantsRef: <code>bool</code> Wether or not to pass a reference to the LuaAPI object."},{"location":"classes/lua_callable_extra/#returns_3","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_callable_extra/#example_3","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\n# Wrap custom_print_function with a LuaCallableExtra.\nvar luaCallableExtra = LuaCallableExtra.new()\nluaCallableExtra.set_info(custom_print_function, 0, true, true)\n# This will replace the built-in print function with ours.\nlua.push_variant(\"print\", luaCallableExtra)\nlua.do_string(\"\"\"\n        print('Hello!', ' How are you?', ' I havent seen you in ', 10, ' days.')\n    \"\"\")\nfunc custom_print_function(lua_object: LuaAPI, args: LuaTuple):\nprint(args.to_array(), \" -- \", lua_object)\n</code></pre>"},{"location":"classes/lua_coroutine/","title":"LuaCoroutine","text":""},{"location":"classes/lua_coroutine/#description","title":"Description","text":"<p>The LuaCoroutine class is used to create and manage Lua coroutines. Lua coroutines bound to the same Lua object share the same global table.</p> <p>In contrast to the LuaAPI class, any file or string you load into the state will not be immediately executed. Everytime the resume method is called, the Lua code will execute until its end is reached or until <code>yield</code> is called from Lua.  </p> <p>Lua code running inside a LuaCoroutine has access to the <code>yield</code> function which can accept and return any number of arguments to GDScript through the resume function of the coroutine. Typically, you will use this function to pause the Lua code for as long as the user specifies in its arguments (see the example below).</p>"},{"location":"classes/lua_coroutine/#methods","title":"Methods","text":""},{"location":"classes/lua_coroutine/#bind","title":"bind void","text":"<p>Binds the coroutine to a LuaAPI object. All coroutines attached to the same object share the same resources.</p>"},{"location":"classes/lua_coroutine/#parameters","title":"Parameters","text":"Parameters Description lua: <code>LuaAPI</code> The LuaAPI object to bind to."},{"location":"classes/lua_coroutine/#returns","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_coroutine/#load_file","title":"load_file LuaError?","text":"<p>Loads a file by its absolute path into the coroutine's state.</p> <p>Warning</p> <p>This method simply loads the contents of the file into the Lua state. It does not execute it. You must use the resume method to execute the code that was loaded.</p> <p>Warning</p> <p>You might experience issues when loading a file in the \"res://\" directory after the game has been exported. In this case, it is recommended to load the file's contents as a string and use the load_string method instead.</p>"},{"location":"classes/lua_coroutine/#parameters_1","title":"Parameters","text":"Parameters Description filePath: <code>String</code> Path to the file."},{"location":"classes/lua_coroutine/#returns_1","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_coroutine/#load_string","title":"load_string void","text":"<p>Loads the content of a string into the Lua state.</p> <p>Warning</p> <p>This method simply loads a string of Lua code into the Lua state. It does not execute it. You must use the resume method to execute the code that was loaded.</p>"},{"location":"classes/lua_coroutine/#parameters_2","title":"Parameters","text":"Parameters Description content: <code>String</code> A string containing Lua code to be loaded."},{"location":"classes/lua_coroutine/#returns_2","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_coroutine/#resume","title":"resume Variant","text":"<p>Resumes or starts the coroutine. Will either return an Array of arguments passed by Lua through the yield() function or a LuaError.</p>"},{"location":"classes/lua_coroutine/#parameters_3","title":"Parameters","text":"Parameters Description args: <code>Array</code> A array of arguments to be passed to yield() in lua (Or await in gdscript if yield_await was used)."},{"location":"classes/lua_coroutine/#returns_3","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_coroutine/#is_done","title":"is_done bool","text":"<p>Returns <code>true</code> if the coroutine has finished executing.</p>"},{"location":"classes/lua_coroutine/#parameters_4","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_coroutine/#returns_4","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua_coroutine/#yield_await","title":"yield_await Signal","text":"<p>Warning</p> <p>This method is still experimental and may cause issues.</p> <p>This method attempts to allow you to hault execution in a GDScript method called by a lua coroutine. It takes an array as an argument, which is then passed to <code>LuaCoroutine.resume()</code>.</p>"},{"location":"classes/lua_coroutine/#parameters_5","title":"Parameters","text":"Parameters Description args: <code>Array</code> Array of arguments to be passed to LuaCoroutine.resume()."},{"location":"classes/lua_coroutine/#returns_5","title":"Returns","text":"<p>Signal</p>"},{"location":"classes/lua_coroutine/#example","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nvar coroutine: LuaCoroutine\nfunc wait_for_object():\nprint(\"before\")\nawait coroutine.yield_await([get_tree().create_timer(3).timeout])\nprint(\"after\")\nreturn 1\nfunc _ready():\nlua = LuaAPI.new()\ncoroutine = lua.new_coroutine()\ncoroutine.push_variant(\"WaitForObjectAsync\", wait_for_object)\ncoroutine.load_string(\"\"\"\n    print(WaitForObjectAsync())\n    \"\"\")\nvar yieldTime = 0\nvar timeSince = 0\nfunc _process(delta):\ntimeSince += delta.\nif coroutine.is_done() || timeSince &lt;= yieldTime:\nreturn\nvar ret = coroutine.resume([])\nif ret is LuaError:\nprint(\"ERROR %d: \" % ret.type + ret.msg)\nreturn\nif ret:\nif ret[0] is Signal:\nset_process(false)\nawait ret[0]\nyieldTime = 0\ntimeSince = 1\nset_process(true)\nreturn\nyieldTime = ret[0]\ntimeSince = 0\n</code></pre>"},{"location":"classes/lua_coroutine/#yield_state","title":"yield_state LuaError","text":"<p>Warning</p> <p>This method is still experimental and may cause issues.</p>"},{"location":"classes/lua_coroutine/#parameters_6","title":"Parameters","text":"Parameters Description args: <code>Array</code> Arguments to be passed to resume. <p>Must be called from a lua hook. Will yield the lua state and pass arguments to resume. Can be destructive.</p>"},{"location":"classes/lua_coroutine/#returns_6","title":"Returns","text":"<p>LuaError</p>"},{"location":"classes/lua_coroutine/#call_function","title":"call_function Variant","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Calls a global Lua function from GDscript.  </p> <p>You can pass any number of arguments to the Lua function by adding them to the array parameter.</p>"},{"location":"classes/lua_coroutine/#parameters_7","title":"Parameters","text":"Parameters Description luaFunctionName: <code>String</code> Name of the Lua function to be invoked. args: <code>Array</code> Array of arguments to be passed to the Lua function."},{"location":"classes/lua_coroutine/#returns_7","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_coroutine/#example_1","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nvar coroutine: LuaCoroutine\nfunc _ready():\nlua = LuaAPI.new()\nlua.bind_libraries([\"base\"])\ncoroutine = lua.new_coroutine()\ncoroutine.load_file(\"user://file.lua\")\ncoroutine.resume([])\n# Call the \"test\" Lua function with \"Val1\", 2 and true as arguments.\ncoroutine.call_function(\"test\", [\"Val1\", 2, true])\n</code></pre> Example: user://file.lua <p>user://file.lua<pre><code>function test(myString, myNumber, myBoolean)\nprint(\"I got \"..myString..\", \"..tostring(myNumber)..\", \"..tostring(myBoolean))\nend\n</code></pre> Output<pre><code>I got Val1, 2, true\n</code></pre></p>"},{"location":"classes/lua_coroutine/#function_exists","title":"function_exists bool","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Returns <code>true</code> if there is a Lua function with the provided name.</p>"},{"location":"classes/lua_coroutine/#parameters_8","title":"Parameters","text":"Parameters Description functionName: <code>String</code> The name of the Lua function to check."},{"location":"classes/lua_coroutine/#returns_8","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua_coroutine/#example_2","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nvar coroutine: LuaCoroutine\nfunc _ready():\nlua = LuaAPI.new()\ncoroutine = lua.new_coroutine()\ncoroutine.load_file(\"user://file.lua\")\ncoroutine.resume([])\n# Check if the \"test\" Lua function is defined.\nif(coroutine.function_exists(\"test\")):\nprint(\"yes\")\nelse:\nprint(\"no\")\n</code></pre> Example: user://file.lua <p>user://file.lua<pre><code>-- The \"test\" function is defined in Lua.\nfunction test()\n-- Code here...\nend\n</code></pre> Output<pre><code>yes\n</code></pre></p>"},{"location":"classes/lua_coroutine/#pull_variant","title":"pull_variant Variant","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Reads the value of a variable by its name from the Lua state.</p>"},{"location":"classes/lua_coroutine/#parameters_9","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to read."},{"location":"classes/lua_coroutine/#returns_9","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_coroutine/#example_3","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nvar coroutine: LuaCoroutine\nfunc _ready():\nlua = LuaAPI.new()\ncoroutine = lua.new_coroutine()\ncoroutine.load_string(\"myNumber = 10\")\ncoroutine.resume([])\n# Read the value of myNumber.\nvar my_number = coroutine.pull_variant(\"myNumber\")\nprint(my_number)\n</code></pre> Output<pre><code>10\n</code></pre></p>"},{"location":"classes/lua_coroutine/#push_variant","title":"push_variant LuaError?","text":"<p>Note</p> <p>This method is identical to LuaAPI's method with the same name.</p> <p>Pushes a copy of a variant (<code>value</code>) to the Lua stack as the global variable <code>variableName</code>.</p>"},{"location":"classes/lua_coroutine/#parameters_10","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to write to. value: <code>Variant</code> The value to be written."},{"location":"classes/lua_coroutine/#returns_10","title":"Returns","text":"<p>LuaError or <code>null</code> depending on whether there is an error or not.</p>"},{"location":"classes/lua_coroutine/#example_4","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nvar coroutine: LuaCoroutine\nvar test = \"Hello Lua!\"\nfunc _ready():\nlua = LuaAPI.new()\ncoroutine = lua.new_coroutine()\ncoroutine.push_variant(\"str\", test)\ncoroutine.load_string(\"print(str)\")\ncoroutine.resume([])\n</code></pre> Output<pre><code>Hello Lua!\n</code></pre></p>"},{"location":"classes/lua_coroutine/#example_5","title":"Example","text":"<pre><code>extends Node2D\nvar lua: LuaAPI\nvar coroutine: LuaCoroutine\nfunc _ready():\nlua = LuaAPI.new()\n# Despite the name, this is not like a OS coroutine. It is a coroutine.\ncoroutine = lua.new_coroutine()\ncoroutine.load_string(\"\nwhile true do\n-- yield is exposed to Lua when the coroutine is bound.\nyield(1)\nprint('Hello world!')\nend\n\")\nvar yieldTime = 0\nvar timeSince = 0\nfunc _process(delta):\ntimeSince += delta\n# If the coroutine has finished executing or if not enough time has passed, do not resume the coroutine.\nif coroutine.is_done() || timeSince &lt;= yieldTime:\nreturn\n# coroutine.resume will either return a LuaError or an Array.\nvar ret = coroutine.resume([])\nif ret is LuaError:\nprint(\"ERROR %d: \" % ret.type + ret.msg)\nreturn\n# Assumes the user will always pass the number of seconds to pause the coroutine for.\nyieldTime = ret[0]\ntimeSince = 0\n</code></pre>"},{"location":"classes/lua_coroutine/#set_hook","title":"set_hook void","text":"<p>Sets the hook for the state. The hook will be called on the events specified by the mask. The count specifies how many instructions should be executed before the hook is called. If count is 0, the hook will be called on every instruction. The hook will be called with the following arguments: <code>hook(parent, event, line)</code>. The parent is the LuaAPI object that owns the current state.</p> <p>This is useful for preventing infinite loops, but it should be kept in mind there will be a large performance tax.</p>"},{"location":"classes/lua_coroutine/#parameters_11","title":"Parameters","text":"Parameters Description hook: <code>Callable</code> The function to be called as a hook. mask: <code>int</code> The hook even mask. count: <code>int</code> Specifies how many instructions should be executed before the hook."},{"location":"classes/lua_coroutine/#returns_11","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_coroutine/#example_6","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nvar coroutine: LuaCoroutine\nfunc _lua_hook(lua: LuaAPI, event: int, line: int):\nvar co: LuaCoroutine = lua.get_running_coroutine()\nco.yield_state([1])\nfunc _ready():\nlua = LuaAPI.new()\n# Despite the name, this is not like a OS coroutine. It is a coroutine.\ncoroutine = lua.new_coroutine()\ncoroutine.set_hook(_lua_hook, lua.HOOK_MASK_COUNT, 8)\ncoroutine.load_string(\"\nfor i=1,2,1 do\nprint('Hello world!')\nend\n\")\nvar yieldTime = 0\nvar timeSince = 0\nvar goodBye = false\nfunc _process(delta):\ntimeSince += delta\n# If the coroutine has finished executing or if not enough time has passed, do not resume the coroutine.\nif coroutine.is_done() || timeSince &lt;= yieldTime:\nif !goodBye:\nlua.do_string(\"\"\"\n            for i = 0,4,1 do \n                print('Good Bye World!')\n            end\n            \"\"\")\ngoodBye=true\nreturn\ngoodBye=false\n# coroutine.resume will either return a LuaError or an Array.\nvar ret = coroutine.resume([])\nif ret is LuaError:\nprint(\"ERROR %d: \" % ret.type + ret.message)\nreturn\nif coroutine.is_done():\nreturn\nyieldTime = ret[0]\ntimeSince = 0\n</code></pre> Output<pre><code>Hello world!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nHello world!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nGood Bye World!\nGood Bye World!\n</code></pre></p>"},{"location":"classes/lua_error/","title":"LuaError","text":""},{"location":"classes/lua_error/#description","title":"Description","text":"<p>A LuaError represents an error that happened in Lua.  </p> <p>Info</p> <p>Most functions in this addon return either a LuaError or null. </p> <p>Tip</p> <p>You may return a LuaError object from a GDScript function, called from Lua, in order to cause an error in Lua.</p>"},{"location":"classes/lua_error/#enumerations","title":"Enumerations","text":""},{"location":"classes/lua_error/#errortype","title":"ErrorType","text":"Name Value Description ERR_TYPE 1 Invalid type error. For example, passing a string when an int was expected. ERR_RUNTIME 2 Lua runtime error. ERR_SYNTAX 3 Lua syntax error. ERR_MEMORY 4 Lua ran out of memory. ERR_ERR 5 Error while handling another error. ERR_FILE 6 Error while opening or reading a file."},{"location":"classes/lua_error/#properties","title":"Properties","text":""},{"location":"classes/lua_error/#message-string","title":"message String","text":"<p>A string containing the error message.</p>"},{"location":"classes/lua_error/#type-errortype","title":"type ErrorType","text":"<p>An enum representing the type of the error.</p>"},{"location":"classes/lua_error/#methods","title":"Methods","text":""},{"location":"classes/lua_error/#new_err","title":"new_error LuaError","text":"<p>Static function that acts as a constructor for new instances of the LuaError class.</p>"},{"location":"classes/lua_error/#parameters","title":"Parameters","text":"Parameters Description message: <code>String</code> The error message. type: <code>ErrorType</code> An enum representing the type of this error."},{"location":"classes/lua_error/#returns","title":"Returns","text":"<p>LuaError</p>"},{"location":"classes/lua_error/#example","title":"Example","text":"<p><pre><code>func test(n: int):\nif n != 5:\n## This will raise an error in the Lua state.\nreturn LuaError.new_error(\"N is not 5 but is %s\" % n, LuaError.ERR_RUNTIME)\nreturn n+5\nfunc _ready():\nlua = LuaAPI.new()\nlua.push_variant(\"test\", test)\n## Most methods return a LuaError.\n## Calling \"test\" with a type that is not a int would also raise a error.\nvar err = lua.do_string(\"test(6)\")\n## If an error does not occur, err will be null.\nif err is LuaError:\nprint(\"ERROR %d: \" % err.type + err.message)\n</code></pre> Output<pre><code>ERROR 2: [LUA_ERRRUN - runtime error ]\nN is not 5 but is 6\nstack traceback:\n    [string \"test(6)\"]:1: in main chunk\n</code></pre></p>"},{"location":"classes/lua_tuple/","title":"LuaTuple","text":""},{"location":"classes/lua_tuple/#description","title":"Description","text":"<p>The LuaTuple class is used to receive any number of arguments from Lua and to return any number of values to Lua.</p> <p>This class behaves like a stack but you can also convert it to and from an array.</p>"},{"location":"classes/lua_tuple/#methods","title":"Methods","text":""},{"location":"classes/lua_tuple/#with_ref","title":"from_array LuaTuple","text":"<p>Static method that creates a LuaTuple with the contents of an array.</p>"},{"location":"classes/lua_tuple/#parameters","title":"Parameters","text":"Parameters Description content: <code>array</code> The content with which the tuple will be populated."},{"location":"classes/lua_tuple/#returns","title":"Returns","text":"<p>LuaTuple</p>"},{"location":"classes/lua_tuple/#example","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\nlua.push_variant(\"getPosition\", my_get_position)\nlua.do_string(\"\"\"\n    local x, y, z = getPosition()\n    print(x, y, z)\n    \"\"\")\nfunc my_get_position():\nreturn LuaTuple.from_array([10, 3, 7])\n</code></pre> Output<pre><code>10, 3, 7\n</code></pre></p>"},{"location":"classes/lua_tuple/#clear","title":"clear void","text":"<p>Removes all elements from the LuaTuple's stack.</p>"},{"location":"classes/lua_tuple/#parameters_1","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_tuple/#returns_1","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_tuple/#get_value","title":"get_value Variant","text":"<p>Gets a value from the LuaTuple's stack at the specified index. It does not pop the value from the stack.</p>"},{"location":"classes/lua_tuple/#parameters_2","title":"Parameters","text":"Parameters Description index: <code>number</code> The index of the value to get."},{"location":"classes/lua_tuple/#returns_2","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_tuple/#is_empty","title":"is_empty bool","text":"<p>Returns <code>true</code> if the LuaTuple's stack is empty and false otherwise.</p>"},{"location":"classes/lua_tuple/#parameters_3","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_tuple/#returns_3","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua_tuple/#pop_back","title":"pop_back Variant","text":"<p>Removes the last element from the LuaTuple's stack and returns it.</p>"},{"location":"classes/lua_tuple/#parameters_4","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_tuple/#returns_4","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_tuple/#pop_front","title":"pop_front Variant","text":"<p>Removes the first element from the LuaTuple's stack and returns it.</p>"},{"location":"classes/lua_tuple/#parameters_5","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_tuple/#returns_5","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua_tuple/#push_back","title":"push_back void","text":"<p>Adds a value to the end of the LuaTuple's stack.</p>"},{"location":"classes/lua_tuple/#parameters_6","title":"Parameters","text":"Parameters Description value: <code>Variant</code> The value to be added to the stack."},{"location":"classes/lua_tuple/#returns_6","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_tuple/#push_front","title":"push_front void","text":"<p>Adds a value to the start of the LuaTuple's stack.</p>"},{"location":"classes/lua_tuple/#parameters_7","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to read."},{"location":"classes/lua_tuple/#returns_7","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_tuple/#set_value","title":"set_value void","text":"<p>Sets the value at the specified index in the LuaTuple's stack.</p>"},{"location":"classes/lua_tuple/#parameters_8","title":"Parameters","text":"Parameters Description index: <code>number</code> An integer representing the index. value: <code>Variant</code> The value to be set."},{"location":"classes/lua_tuple/#returns_8","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua_tuple/#size","title":"size number","text":"<p>Returns the number of elements in the LuaTuple's stack.</p>"},{"location":"classes/lua_tuple/#parameters_9","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_tuple/#returns_9","title":"Returns","text":"<p>number</p>"},{"location":"classes/lua_tuple/#to_array","title":"to_array array","text":"<p>Converts the LuaTuple's stack to an array.</p>"},{"location":"classes/lua_tuple/#parameters_10","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua_tuple/#returns_10","title":"Returns","text":"<p>array</p>"},{"location":"classes/lua_tuple/#example_1","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: LuaAPI\nfunc _ready():\nlua = LuaAPI.new()\n# Wrap custom_print_function with a LuaCallableExtra.\nvar luaCallableExtra = LuaCallableExtra.new()\nluaCallableExtra.set_info(custom_print_function, 1, true, true)\n# This will replace the built-in print function with ours.\nlua.push_variant(\"print\", luaCallableExtra)\nlua.do_string(\"\"\"\n        print('Hello!', ' How are you?', ' I havent seen you in ', 10, ' days.')\n    \"\"\")\nfunc custom_print_function(lua_object: LuaAPI, args: LuaTuple):\nprint(args.to_array(), \" -- \", lua_object)\n</code></pre> Example Output<pre><code>[\"Hello!\", \" How are you?\", \" I havent seen you in \", 10, \" days.\"] -- &lt;LuaAPI#-9223372010447437394&gt;\n</code></pre></p>"},{"location":"contributing/development_environment/","title":"Development Environment","text":"<p>Developing for this addon can be a little tricky at first. Its highly recommended that you have a decent amount of experience with Godot and C++ if you plan on contributing. </p>"},{"location":"contributing/development_environment/#what-you-will-need","title":"What you will need","text":"<ul> <li>An IDE, we will discuss Visual Studio Code here but feel free to use others.</li> <li>Respective platform build requirements as specified here. If on Windows its recommended to use mingw over Visual Studio. As Visual Studio tends to give very unhelpful error messages. We recommend TDM-GCC for mingw.</li> <li>A copy of the latest godot 4.0 stable build and the godot source code.</li> </ul>"},{"location":"contributing/development_environment/#setting-up-vscode","title":"Setting up VSCode","text":""},{"location":"contributing/development_environment/#recommended-addons","title":"Recommended Addons","text":"<ul> <li>Microsoft C/C++.</li> <li>Clang-Format.</li> <li>CS 128 Clang-Tidy.</li> <li>Python.</li> </ul>"},{"location":"contributing/development_environment/#setup-compilation-tasks","title":"Setup Compilation Tasks","text":"<p>Tasks in VSCode help a lot to quickly rebuild the project. To setup compilation tasks create the file <code>.vscode/tasks.json</code> in the base repo folder. Below is an example config, make sure to replace all [PLACE HOLDERS]. <pre><code>{\n\"version\": \"2.0.0\",\n\"tasks\": [\n{\n\"label\": \"Build Module\",\n\"type\": \"shell\",\n\"command\": \"scons target=editor debug_symbols=yes custom_modules=${workspaceFolder} compiledb=yes &amp;&amp; cp compile_commands.json ${workspaceFolder}/compile_commands.json\",\n\"problemMatcher\": \"$msCompile\",\n\"group\": {\n\"kind\": \"build\",\n\"isDefault\": true\n},\n\"options\": {\n\"cwd\": \"[PATH TO GODOT SOURCE FOLDER]\"\n}\n},\n{\n\"label\": \"Build GDExtension\",\n\"type\": \"shell\",\n\"command\": \"scons target=template_debug debug_symbols=yes\",\n\"problemMatcher\": \"$msCompile\",\n\"group\": {\n\"kind\": \"build\",\n\"isDefault\": false\n},\n\"options\": {\n\"cwd\": \"${workspaceFolder}\"\n}\n}\n]\n}\n</code></pre></p>"},{"location":"contributing/development_environment/#setup-debugging","title":"Setup Debugging","text":"<p>For debugging you must have GDB installed. Start be creating the file <code>.vscode/launch.json</code> in the base repo folder. Below is an example config, make sure to replace all [PLACE HOLDERS]. <pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"name\": \"Module Debug\",\n\"type\": \"cppdbg\",\n\"request\": \"launch\",\n\"program\": \"[PATH TO GODOT SOURCE FOLDER]/bin/godot.[PLATFORM].editor.x86_64\",\n\"args\": [/*\"--editor\"*/], // Uncomment if you would like to run the editor. Keep in mind debugging the project will not launch in GDP, only the editor its self.\n\"stopAtEntry\": false,\n\"cwd\": \"[PATH TO MODULE TEST PROJECT]\",\n\"environment\": [],\n\"externalConsole\": false,\n\"MIMode\": \"gdb\",\n\"miDebuggerPath\": \"[PATH TO GDB]\",\n\"setupCommands\": [\n{\n\"description\": \"Enable pretty-printing for gdb\",\n\"text\": \"-enable-pretty-printing\",\n\"ignoreFailures\": true\n}\n]\n},\n{\n\"name\": \"GDExtension Debug\",\n\"type\": \"cppdbg\",\n\"request\": \"launch\",\n\"program\": \"[PATH TO STABLE GODOT 4.0 BUILD]\",\n\"args\": [/*\"--editor\"*/], // Uncomment if you would like to run the editor. Keep in mind debugging the project will not launch in GDP, only the editor its self.\n\"stopAtEntry\": false,\n\"cwd\": \"${workspaceFolder}/project\",\n\"environment\": [],\n\"externalConsole\": false,\n\"MIMode\": \"gdb\",\n\"miDebuggerPath\": \"[PATH TO GDB]\",\n\"setupCommands\": [\n{\n\"description\": \"Enable pretty-printing for gdb\",\n\"text\": \"-enable-pretty-printing\",\n\"ignoreFailures\": true\n}\n]\n},\n]\n}\n</code></pre></p>"},{"location":"contributing/development_environment/#other-helpful-settings","title":"Other Helpful Settings","text":"<p>In the above compilation tasks we tell SCons to build a <code>compile_commands.json</code> file. Which is a universal format for IDE's to see what exact command is needed to compile each file. This will prevent VSCode form having a ton of random include errors since the godot source is outside of the project folder. We need to tell VSCode that his file exists and about godot-cpp includes. To do so create the file <code>.vscode/c_cpp_properties.json</code> in the base repo folder. Below is an example config, make sure to replace all [PLACE HOLDERS]. <pre><code>{\n\"configurations\": [\n{\n\"name\": \"[Linux, Win32 or Mac]\",\n\"includePath\": [\n\"${workspaceFolder}/**\",\n\"${workspaceFolder}/external/**\",\n\"${workspaceFolder}/external/godot-cpp/include/**\",\n\"${workspaceFolder}/external/godot-cpp/gen/include/**\"\n],\n\"defines\": [\n// \"LAPI_GDEXTENSION\"\n],\n\"cStandard\": \"c17\",\n\"cppStandard\": \"c++14\",\n\"compileCommands\": \"compile_commands.json\"\n}\n],\n\"version\": 4\n}\n</code></pre></p> <p>Another helpful configuration is associating SCon files with python and enabling format on save. If you enable this make sure you have clang-format and clang-tidy installed and set as the default formatter. To do so create the file <code>.vscode/settings.json</code> in the base repo folder. Below is an example config, make sure to replace all [PLACE HOLDERS]. <pre><code>{\n\"editor.formatOnSave\": true,\n\"files.associations\": {\n\"SCsub\": \"python\",\n\"SConstruct\": \"python\",\n\"SConscript\": \"python\",\n}\n}\n</code></pre></p>"},{"location":"contributing/development_environment/#scripts","title":"Scripts","text":"<p>We provide several scripts in the <code>scripts</code> folder. Some are meant to be run by actions. But some are also useful locally. All scripts are meant to be ran from the base repo folder.</p> <ul> <li>clang_format.sh This script will auto format all source files according to the Clang-Format rules.</li> <li>clang_format.sh This script checks generic file formatting rules, it works based off the current files staged in git. Not actual files. But will automatically update them (will not stage).</li> <li>codespell.sh This script requires codespell to be installed on your system. It will find common spelling mistakes in comments and string and automatically fix them.</li> </ul>"},{"location":"contributing/ways_to_contribute/","title":"Ways to contribute","text":"<p>Godot LuaAPI is, and will always be, a free and open source project. While the bulk of the work is being done by WeaselGames, we welcome any help we can get maintaining the project. If you are interested in contributing, here are several ways you can:</p> <ul> <li>By using LuaAPI. Contributing does not exclusively mean making code changes. One of the best ways to help out is to simply use the addon. While we try our best to verify functionality and cover most use cases, there will always be something we overlook, be it an unforeseen use case or a bug that managed to slip through the cracks. By reporting these issues, you help us out tremendously.</li> <li>Documentation. Another huge area you could help is documentation. We currently have two separate forms of documentation. There is the in engine XML based documentation located here. This documentation we only aim to cover basic definitions and descriptions in. Additionally, we have wiki, based off of MkDocs and mike. It uses markdown text files to generate our static wiki site which is hosted via github pages. You can find the source for it here.</li> <li>Bug Fixes/Additions. For those who are more eager to make a direct contribution, we also accept help maintaining the code its self. It's fine to just send in a PR. But it would probably be a good idea to discuss what you would like to do first in the Weasel Games Discord, just in case its a change we are not interested in or is already being worked on. If you plan on making code changes, please also see Development Environment</li> </ul>"},{"location":"examples/lua_callable/","title":"The LuaCallable Type","text":""},{"location":"examples/lua_callable/#description","title":"Description","text":"<p>The LuaCallable type extends the CallableCustom type. It is used when a Lua function is returned or pulled from Lua. In this case, a copy of the function is created and a reference to it is stored. The CallableCustom holds this reference ID and a reference to the Lua state, which enables the function to be called at a later time. By using LuaCallable, you can save a reference to a Lua function and call it whenever needed.</p> <p>Warning</p> <p>Due to no support for the CallableCustom type in GDExtension. This type is not present in the GDExtension version of this addon.</p>"},{"location":"examples/lua_callable/#example","title":"Example","text":"<pre><code>extends Node\nvar lua: LuaAPI = LuaAPI.new()\nfunc _ready():\nlua.do_string(\"\"\"\n    function set_location(pos)\n        pos = pos + Vector2(1.5, 9)\n        return pos\n    end\n    \"\"\")\nvar set_location = lua.pull_variant(\"set_location\")\nvar value2 = set_location.call(Vector2(1, 1))\nprint(value2)\n</code></pre>"},{"location":"examples/objects/","title":"Working with Objects in Lua","text":"<p>Normally, when using <code>push_variant()</code> or the return value of a GDScript function that Lua calls, the value is copied to Lua. However, types that inherit from Object work a bit differently. Objects will be pushed to Lua as UserData. This means they are passed by reference to or from Lua.</p>"},{"location":"examples/objects/#controlling-access-to-fields-and-methods","title":"Controlling access to fields and methods","text":"<p>In the background...</p> <p>In order to call functions and get values from the object we assign the mt_Object metatable to it. This is a custom metatable we defined for Objects. This allows for methods to be called on the object, values to be get/set on the Object and much more.</p>"},{"location":"examples/objects/#lua_fields","title":"lua_fields","text":"<p>By default every field and method is available to Lua. You can limit what Lua has access to by defining either the <code>lua_fields()</code> method, which must return an Array of the names of allowed fields/methods, or by defining the <code>__index()</code> method, which takes reference to the LuaAPI and a string of the field being requested by Lua. If you would like to allow the field, add it's name to the array and return it.</p> <p>Below is an example of passing a Object to Lua: <pre><code>extends Node2D\nvar lua: LuaAPI\nclass Player:\nvar pos = Vector2(0, 0)\n# If lua_fields is not defined or returns a empty array, all functions and fields will be available.\nfunc lua_fields():\nreturn [\"pos\", \"move_forward\"]\nfunc move_forward():\npos.x+=1\nvar player2: Player\nfunc _ready():\nlua = LuaAPI.new()\nlua.permissive = true\nplayer2 = Player.new()\nlua.push_variant(\"getPlayer2\", func(): return player2)\nlua.expose_constructor(\"Player\", Player)\nvar err = lua.do_string(\"\"\"\n    player = Player()\n    player.move_forward()\n    print(player.pos.x)\n    player2 = getPlayer2()\n    player2.pos = Vector2(50, 1)\n    print(player2.pos)\n    \"\"\")\nif err is LuaError:\nprint(err.message)\nvar player = lua.pull_variant(\"player\")\nprint(player.pos)\nprint(player2.pos)\n</code></pre></p>"},{"location":"examples/objects/#overriding-metamethods","title":"Overriding metamethods","text":"<p>For some, the previous approach is still too limiting though. So we also allow you to override almost any metamethod on the object.</p> <p>Note</p> <p>The first argument passed to the metamethod is always reference to the LuaAPI object. Besides that the arguments will be the same as if you were using it in Lua.</p> <p>Info</p> <p>You can learn more about all available metamethods in the official Lua manual.</p>"},{"location":"examples/objects/#__index","title":"__index","text":"<p>The __index metamethod is called when Lua tries to get a value from an object. This is the same as if you were using the <code>.</code> operator in Lua or the <code>[]</code> operator. Essentially, this is what the <code>lua_fields()</code> method is doing. However, you may want to do more than just return a value. You can also raise an error or return a custom value. </p> <p>The __index method must take two arguments. The first is a reference to the LuaAPI object. The second is the name of the field/method being requested. The method may return the value of the field/method or a LuaError to raise an error.</p> <p>Here is a example of that: <pre><code>extends Node2D\nvar lua: LuaAPI\nclass Player:\nvar pos = Vector2(1, 0)\n# Most metamethods can be overridden. The function names are the same as the metamethods.\nfunc __index(ref: LuaAPI, index):\nif index==\"pos\":\nreturn pos\nelse:\nreturn LuaError.new_error(\"Invalid index '%s'\" % index)\nfunc move_forward():\npos.x+=1\nfunc _ready():\nlua = LuaAPI.new()\nlua.permissive = true\nlua.expose_constructor(\"Player\", Player)\nvar err = lua.do_string(\"\"\"\n    player = Player()\n    print(player.pos.x)\n    player.move_forward() -- This will cause our custom error\n    \"\"\")\nif err is LuaError:\nprint(err.message)\nvar player = lua.pull_variant(\"player\")\nprint(player.pos)\n</code></pre></p>"},{"location":"examples/objects/#__newindex","title":"__newindex","text":"<p>The __newindex metamethod is called when Lua tries to set a value on an object. This is the same as if you were using the <code>=</code> operator in Lua. Essentially, this is what the <code>lua_fields()</code> method is doing. However, you may want to do more than just set a value. You can also raise an error or set a custom value.</p> <p>The __newindex method must take three arguments. The first is a reference to the LuaAPI object. The second is the name of the field/method being set. The third is the value being set. The method may a LuaError to raise an error.</p> <p>Here is a example of that: <pre><code>extends Node2D\nvar lua: LuaAPI\nclass Player:\nvar pos = Vector2(1, 0)\n# Most metamethods can be overridden. The function names are the same as the metamethods.\nfunc __newindex(ref: LuaAPI, index, value):\nif index==\"pos\":\npos = value\nelse:\nreturn LuaError.new_error(\"Invalid index '%s'\" % index)\nfunc move_forward():\npos.x+=1\nfunc _ready():\nlua = LuaAPI.new()\nlua.permissive = true\nlua.expose_constructor(\"Player\", Player)\nvar err = lua.do_string(\"\"\"\n    player = Player()\n    player.pos = Vector2(50, 1)\n    print(player.pos)\n    player.move_forward = 5 -- This will cause our custom error\n    \"\"\")\nif err is LuaError:\nprint(err.message)\nvar player = lua.pull_variant(\"player\")\nprint(player.pos)\n</code></pre></p>"},{"location":"getting_started/before_you_start/","title":"Before you start...","text":"<p>Some things to note, this is not the only way to support Modding in your game. It's also not the only way to support Lua Modding in your game. In fact, using this mod to create your Modding API will likely take a lot more work than using native scripts for Modding. However, the advantage using luaAPI over native scripts is that the Lua code is sandboxed. No one can access parts of the engine that you don't explicitly give access to.</p> <p>If you are looking to make your game using Lua or would like to support Modding without worrying about a sandbox, check out one of these projects:</p> <ul> <li>luascript by perbone</li> <li>godot-lua-pluginscript by gilzoide</li> </ul>"},{"location":"getting_started/installation/","title":"Installation","text":"<p>The first thing you will need to do is obtain a copy of the editor built with this module. You can either compile from source yourself or download one of the nightly builds. Or you can download the GDExtension plugin.</p>"},{"location":"getting_started/installation/#release-builds","title":"Release Builds","text":"<ul> <li>\u2699\ufe0f GDExtension</li> <li>\u2699\ufe0f GDExtension LuaJIT</li> <li>\ud83d\udc27 Linux Editor</li> <li>\ud83d\udc27 Linux Editor LuaJIT</li> <li>\ud83c\udfa8 Windows Editor</li> <li>\ud83c\udfa8 Windows Editor LuaJIT</li> <li>\ud83c\udf4e MacOS Editor</li> <li>\ud83c\udf4e MacOS Editor LuaJIT</li> <li>\ud83d\udddc\ufe0f Export Templates</li> <li>For previous versions see releases</li> </ul>"},{"location":"getting_started/installation/#compiling-from-source","title":"Compiling from source","text":""},{"location":"getting_started/installation/#getting-the-sources","title":"Getting the sources","text":"<ul> <li>Start by cloning the main branch of the Godot engine <code>git clone https://github.com/godotengine/godot</code></li> <li>Next cd into godot/modules and clone this repo <code>cd godot/modules</code> <code>git clone --recurse-submodules https://github.com/WeaselGames/godot_luaAPI luaAPI</code></li> </ul>"},{"location":"getting_started/installation/#compiling","title":"Compiling","text":"<p>This module does not requires any extra tooling to compile besides that required by Godot its self. So from this point you can follow the tutorial on the Godot wiki.</p>"}]}