{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#godot-luaapi-v11-stable","title":"Godot LuaAPI V1.1-stable","text":"Art created by Alex <p>This is a Godot engine module that adds Lua API support via GDScript. Importantly this is NOT meant to be a replacement for or alternative to GDScript. This module provides no functionality to program your game out of the box. This module allows you to create custom modding API's in a sandboxed environment. You have control of what people can and can not do within that sandbox.</p> <p>To use you can either Compile from source or you can download one of the releases.</p> <p>By default the Lua print function is set to print to the GDEditor console. This can be changed by exposing your own print function as it will overwrite the existing one.</p> <p>Some things to note, this is not the only way to support Modding in your game. It's also not the only way to support Lua Modding in your game. In fact, using this mod to create your Modding API will likely take a lot more work than using native scripts for Modding. However, the advantage using luaAPI over native scripts is that the Lua code is sandboxed. No one can access parts of the engine that you don't explicitly give access to.</p> <p>If you are looking to make your game using Lua or would like to support Modding without worrying about a sandbox, check out one of these projects:</p> <ul> <li>luascript by perbone</li> <li>godot-lua-pluginscript by gilzoide </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Run lua directly from a string or a text file.</li> <li>Push any Variant as a global.</li> <li>Expose GDScript functions to lua with a return value and up to 5 arguments.</li> <li>Call lua functions from GDScript.</li> <li>By default the lua print function is set to print to the GDEditor console. This can be changed by exposing your own print function as it will overwrite the existing one.</li> <li>Basic types are passed as userdata (currently: Vector2, Vector3 and Color) with a useful metatable.</li> </ul> <p>If a feature is missing that you would like to see feel free to create a Feature Request or submit a PR.</p>"},{"location":"classes/lua/","title":"Lua","text":""},{"location":"classes/lua/#description","title":"Description","text":"<p>The Lua class is used to interact with Lua from GDScript.  </p> <p>This class provides the methods to execute Lua code; to call Lua functions from GDScript; to read and write the value of global Lua variables and more.</p> <p>Info</p> <p>The following Lua libraries are included by default: base, math, string and table. You can learn more about the available libraries and their methods in the official Lua manual.</p>"},{"location":"classes/lua/#methods","title":"Methods","text":""},{"location":"classes/lua/#call_function","title":"call_function Variant","text":"<p>Calls a global Lua function from GDscript.  </p> <p>You can pass any number of arguments to the Lua function by adding them to the array parameter.</p> <p>Warning</p> <p>You may check if the function exists first with the lua_function_exists method.</p> <p>Warning</p> <p>if you call this function with the <code>protectedCall</code> parameter set to <code>false</code> and an error occurs, the whole engine will crash!</p>"},{"location":"classes/lua/#parameters","title":"Parameters","text":"Parameters Default Value Description luaFunctionName: <code>String</code> None Name of the Lua function to be invoked. args: <code>Array</code> None Array of arguments to be passed to the Lua function. protectedCall: <code>bool</code> <code>true</code> Whether or not the Lua function should be called with a protected call. callbackCaller: <code>Object</code> <code>null</code> The object that has the callback. callback: <code>String</code> <code>\"\"</code> The name of the callback which will handle any errors."},{"location":"classes/lua/#returns","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua/#example","title":"Example","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc lua_call_back(err):\n# This function will be called if there is a Lua error.\nprint(err)\nfunc _ready():\nlua.do_file(\"user://luaFile.lua\")\nif( lua.lua_function_exists(\"set_colours\") ):\n# call_function will return a Variant if Lua returns nothing the value will be null\nvar value = lua.call_function( \"set_colours\", [\"red\", \"blue\"], true, self, \"lua_call_back\")\nif value != null:\nprint(value)\nelse:\nprint(\"no value returned\")\n</code></pre>"},{"location":"classes/lua/#do_file","title":"do_file void","text":"<p>Loads the content of a file by its absolute path into the Lua state by passing it to do_string.</p> <p>Warning</p> <p>You might experience issues when loading a file in the \"res://\" directory after the game has been exported. In this case, it is recommended to load the file's contents as a string and use the do_string method instead.</p> <p>Warning</p> <p>if you call this function with the <code>protectedCall</code> parameter set to <code>false</code> and an error occurs, the whole engine will crash!</p>"},{"location":"classes/lua/#parameters_1","title":"Parameters","text":"Parameters Default Value Description filePath: <code>String</code> None Absolute path to the file. protectedCall: <code>bool</code> <code>true</code> Whether or not the Lua function should be called with a protected call. callbackCaller: <code>Object</code> <code>null</code> The object that has the callback. callback: <code>String</code> <code>\"\"</code> The name of the callback which will handle any errors."},{"location":"classes/lua/#returns_1","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua/#example_1","title":"Example","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.do_file(\"user://luaFile.lua\")\n</code></pre>"},{"location":"classes/lua/#do_string","title":"do_string void","text":"<p>Loads the content of a string into the Lua state, executing it.</p> <p>Warning</p> <p>if you call this function with the <code>protectedCall</code> parameter set to <code>false</code> and an error occurs, the whole engine will crash!</p>"},{"location":"classes/lua/#parameters_2","title":"Parameters","text":"Parameters Default Value Description content: <code>String</code> None A string containing Lua code to be executed. protectedCall: <code>bool</code> <code>true</code> Whether or not the Lua function should be called with a protected call. callbackCaller: <code>Object</code> <code>null</code> The object that has the callback. callback: <code>String</code> <code>\"\"</code> The name of the callback which will handle any errors."},{"location":"classes/lua/#returns_2","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua/#examples","title":"Examples","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.do_string(\"for i=1,10,1 do print('Hello lua!') end\")\n</code></pre>"},{"location":"classes/lua/#expose_function","title":"expose_function void","text":"<p>Defines a Lua function with name <code>luaFunctionName</code>. When Lua code calls it, it will call the <code>gdFunction</code> method of <code>nodeObject</code>, so make sure the object still exists at this moment.</p> <p>Warning</p> <p>Make sure that the <code>nodeObject</code> still exists and has not been freed by the time the <code>gdFunction</code> is called.</p>"},{"location":"classes/lua/#parameters_3","title":"Parameters","text":"Parameters Description nodeObject: <code>Object</code> The object which has the callback. gdFunction: <code>String</code> The name of the GDScript callback. luaFunctionName: <code>String</code> The name which the Lua function will take."},{"location":"classes/lua/#returns_3","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua/#examples_1","title":"Examples","text":"<p><pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc lua_add(a, b):\nreturn a + b\nfunc _ready():\nlua.expose_function(self, \"lua_add\", \"add\")\nlua.do_string(\"print(add(2, 4))\")\n</code></pre> Output<pre><code>6\n</code></pre></p>"},{"location":"classes/lua/#kill_all","title":"kill_all void","text":"<p>Kills all current Lua threads in execution.</p>"},{"location":"classes/lua/#parameters_4","title":"Parameters","text":"<p>None</p>"},{"location":"classes/lua/#returns_4","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua/#example_2","title":"Example","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.set_threaded(true)\nlua.do_string(\"while true do pass end\")\nlua.kill_all()\n</code></pre>"},{"location":"classes/lua/#lua_function_exists","title":"lua_function_exists bool","text":"<p>Returns <code>true</code> if there is a Lua function with the provided name.</p>"},{"location":"classes/lua/#parameters_5","title":"Parameters","text":"Parameters Description luaFunctionName: <code>String</code> The name of the Lua function to check."},{"location":"classes/lua/#returns_5","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua/#pull_variant","title":"pull_variant Variant","text":"<p>Reads the value of a variable by its name from the Lua state.</p>"},{"location":"classes/lua/#parameters_6","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to read."},{"location":"classes/lua/#returns_6","title":"Returns","text":"<p>Variant</p>"},{"location":"classes/lua/#example_3","title":"Example","text":"<p><pre><code>extends Node2D\nvar lua: Lua\nfunc _ready():\nlua = Lua.new()\nlua.do_string(\"myNumber = 10\")\n# Read the value of myNumber.\nvar my_number = lua.pull_variant(\"myNumber\")\nprint(my_number)\n</code></pre> Output<pre><code>10\n</code></pre></p>"},{"location":"classes/lua/#push_variant","title":"push_variant bool","text":"<p>Pushes a copy of a variant (<code>value</code>) to the Lua stack as the global variable <code>variableName</code>.</p>"},{"location":"classes/lua/#parameters_7","title":"Parameters","text":"Parameters Description variableName: <code>String</code> The name of the Lua variable to write to. value: <code>Variant</code> The value to be written."},{"location":"classes/lua/#returns_7","title":"Returns","text":"<p>bool</p>"},{"location":"classes/lua/#example_4","title":"Example","text":"<p><pre><code>extends Node2D\nonready var lua = Lua.new()\nvar gdscript_string = \"Hello lua!\"\nfunc _ready():\nlua.push_variant(gdscript_string, \"myString\")\nlua.do_string(\"print(myString)\")\n</code></pre> Output<pre><code>Hello Lua!\n</code></pre></p>"},{"location":"classes/lua/#set_threaded","title":"set_threaded void","text":"<p>Set whether Lua runs on a separate thread. By default, Lua runs on the same thread.</p>"},{"location":"classes/lua/#parameters_8","title":"Parameters","text":"Parameters Description runOnSeparateThread: <code>bool</code> Whether Lua should run on a separate thread or not."},{"location":"classes/lua/#returns_8","title":"Returns","text":"<p>void</p>"},{"location":"classes/lua/#example_5","title":"Example","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.set_threaded(true)\nlua.do_string(\"while true do print(\"The game will not freeze\") end\" )\n</code></pre>"},{"location":"getting_started/before_you_start/","title":"Before you start...","text":""},{"location":"getting_started/before_you_start/#what-this-module-isnt-for","title":"What this module isn't for","text":"<p>Before you start using this module, you should know that this module does not provide a replacement for GDScript.</p> <p>If that is what you are looking for I suggest you check out one of these modules:  </p> <ul> <li>luascript by perbone </li> <li>godot-lua-pluginscript by gilzoide </li> </ul>"},{"location":"getting_started/before_you_start/#what-this-module-is-for","title":"What this module is for","text":"<p>This is a Godot engine module that adds Lua API support via GDScript. This module provides no functionality to program your game out of the box. This module allows you to create custom modding API's in a sandboxed environment. You have control of what people can and can not do within that sandbox.</p>"},{"location":"getting_started/examples/","title":"Examples","text":""},{"location":"getting_started/examples/#running-lua-code-from-a-string","title":"Running Lua code from a string","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.do_string(\"for i=1,10,1 do print('Hello lua!') end\")\n</code></pre>"},{"location":"getting_started/examples/#running-lua-code-from-a-file","title":"Running Lua code from a file","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.do_file(\"user://luaFile.lua\")\n</code></pre>"},{"location":"getting_started/examples/#pushing-a-variant-as-a-global","title":"Pushing a Variant as a global","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nvar test = \"Hello lua!\"\nfunc _ready():\nlua.push_variant(test, \"str\")\nlua.do_string(\"print(str)\")\n</code></pre>"},{"location":"getting_started/examples/#exposing-a-gdscript-function-to-lua","title":"Exposing a GDScript function to Lua","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc lua_add(a, b):\nreturn a + b\nfunc _ready():\nlua.expose_function(self, \"lua_add\", \"add\")\nlua.do_string(\"print(add(2, 4))\")\n</code></pre>"},{"location":"getting_started/examples/#calling-a-lua-function-from-gdscript","title":"Calling a Lua function from GDScript","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.do_file(\"user://luaFile.lua\")\nif( lua.lua_function_exists(\"set_colours\") ):\n# call_function will return a Variant if lua returns nothing the value will be null\nvar value = lua.call_function( \"set_colours\", [\"red\", \"blue\"])\nif value != null:\nprint(value)\nelse:\nprint(\"no value returned\")  </code></pre>"},{"location":"getting_started/examples/#capturing-lua-errors","title":"Capturing Lua errors","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc luaCallBack(err):\nprint(err)\nfunc _ready():\nlua.do_string(\"print(This wont work)\", true , self, \"luaCallBack\")\n</code></pre>"},{"location":"getting_started/examples/#enable-threading","title":"Enable threading","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.set_threaded(true)\nlua.do_string(\"while true do print(\"The game will not freeze\") end\" )\n</code></pre>"},{"location":"getting_started/examples/#kill-all-lua-threads","title":"Kill all Lua threads","text":"<pre><code>extends Node2D\nonready var lua = Lua.new()\nfunc _ready():\nlua.do_string(\"while true do pass end\")\nlua.kill_all()\n</code></pre>"},{"location":"getting_started/installation/","title":"Installation","text":"<p>The first thing you will need to do is obtain a copy of the editor built with this module. You can either compile from source yourself or download one of the releases.</p>"},{"location":"getting_started/installation/#compiling-from-source","title":"Compiling from source","text":""},{"location":"getting_started/installation/#getting-the-sources","title":"Getting the sources","text":"<ul> <li>Start by cloning the 3.4.4-stable branch of the Godot engine <code>git clone https://github.com/godotengine/godot -b 3.4.4-stable</code></li> <li>Next cd into godot/modules and clone this repo <code>cd godot/modules</code> <code>git clone --recurse-submodules -b v1.1-stable https://github.com/WeaselGames/godot_luaAPI luaAPI</code></li> </ul>"},{"location":"getting_started/installation/#compiling","title":"Compiling","text":"<p>This module does not requires any extra tooling to compile besides that required by Godot its self. So from this point you can follow the tutorial on the Godot wiki.</p>"}]}